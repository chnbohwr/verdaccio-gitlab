{"version":3,"sources":["../src/gitlab.js"],"names":["ACCESS_LEVEL_MAPPING","$guest","$reporter","$developer","$maintainer","$owner","BUILTIN_ACCESS_LEVEL_ANONYMOUS","DEFAULT_ALLOW_ACCESS_LEVEL","VerdaccioGitLab","constructor","config","options","logger","info","url","authCache","enabled","ttl","AuthCache","DEFAULT_TTL","legacy_mode","publishLevel","publish","Object","keys","includes","Error","authenticate","user","password","cb","trace","cachedUserGroups","_getCachedUserGroups","debug","GitlabAPI","Gitlab","token","Users","current","then","response","username","httperror","publishLevelId","gitlabPublishQueryParams","owned","min_access_level","groupsPromise","Groups","all","groups","filter","group","path","full_path","map","projectsPromise","Projects","projects","project","path_with_namespace","Promise","projectGroups","realGroups","_setCachedUserGroups","catch","error","message","adduser","allow_access","_package","gitlab","packageAccess","access","length","name","undefined","some","level","allow_publish","packageScopePermit","packagePermit","real_group","real_groups","_matchGroupWithPackage","perm","missingPerm","indexOf","package_name","split_real_group","split","split_package_name","slice","i","userData","findUser","storeUser","UserData"],"mappings":"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","file":"gitlab.js","sourcesContent":["// Copyright 2018 Roger Meier <roger@bufferoverflow.ch>\n// SPDX-License-Identifier: MIT\n// @flow\n\nimport type { Callback, IPluginAuth, Logger, PluginOptions, RemoteUser, PackageAccess } from '@verdaccio/types';\nimport type { UserDataGroups } from './authcache';\n\nimport Gitlab from 'gitlab';\nimport { AuthCache, UserData } from './authcache';\nimport httperror from 'http-errors';\n\nexport type VerdaccioGitlabAccessLevel =\n  '$guest' |\n  '$reporter' |\n  '$developer' |\n  '$maintainer' |\n  '$owner';\n\nexport type VerdaccioGitlabConfig = {\n  url: string,\n  authCache?: {\n    enabled?: boolean,\n    ttl?: number\n  },\n  legacy_mode?: boolean,\n  publish?: VerdaccioGitlabAccessLevel\n};\n\nexport type VerdaccioGitlabPackageAccess = PackageAccess & {\n  name: string,\n  gitlab?: boolean\n}\n\nconst ACCESS_LEVEL_MAPPING = {\n  $guest: 10,\n  $reporter: 20,\n  $developer: 30,\n  $maintainer: 40,\n  $owner: 50\n};\n\n// List of verdaccio builtin levels that map to anonymous access\nconst BUILTIN_ACCESS_LEVEL_ANONYMOUS = [ '$anonymous', '$all' ];\n\n// Level to apply on 'allow_access' calls when a package definition does not define one\nconst DEFAULT_ALLOW_ACCESS_LEVEL = [ '$all' ];\n\n\nexport default class VerdaccioGitLab implements IPluginAuth {\n  options: PluginOptions;\n  config: VerdaccioGitlabConfig;\n  authCache: AuthCache;\n  logger: Logger;\n  publishLevel: VerdaccioGitlabAccessLevel;\n\n  constructor(config: VerdaccioGitlabConfig, options: PluginOptions) {\n    this.logger = options.logger;\n    this.config = config;\n    this.options = options;\n    this.logger.info(`[gitlab] url: ${this.config.url}`);\n\n    if ((this.config.authCache || {}).enabled === false) {\n      this.logger.info('[gitlab] auth cache disabled');\n    } else {\n      const ttl = (this.config.authCache || {}).ttl || AuthCache.DEFAULT_TTL;\n      this.authCache = new AuthCache(this.logger, ttl);\n      this.logger.info(`[gitlab] initialized auth cache with ttl: ${ttl} seconds`);\n    }\n\n    if (this.config.legacy_mode) {\n      this.publishLevel = '$owner';\n      this.logger.info('[gitlab] legacy mode pre-gitlab v11.2 active, publish is only allowed to group owners');\n    } else {\n      this.publishLevel = '$maintainer';\n      if (this.config.publish) {\n        this.publishLevel = this.config.publish;\n      }\n\n      if (!Object.keys(ACCESS_LEVEL_MAPPING).includes(this.publishLevel)) {\n        throw Error(`[gitlab] invalid publish access level configuration: ${this.publishLevel}`);\n      }\n      this.logger.info(`[gitlab] publish control level: ${this.publishLevel}`);\n    }\n  }\n\n  authenticate(user: string, password: string, cb: Callback) {\n    this.logger.trace(`[gitlab] authenticate called for user: ${user}`);\n\n    // Try to find the user groups in the cache\n    const cachedUserGroups = this._getCachedUserGroups(user, password);\n    if (cachedUserGroups) {\n      this.logger.debug(`[gitlab] user: ${user} found in cache, authenticated with groups:`, cachedUserGroups);\n      return cb(null, cachedUserGroups.publish);\n    }\n\n    // Not found in cache, query gitlab\n    this.logger.trace(`[gitlab] user: ${user} not found in cache`);\n\n    const GitlabAPI = new Gitlab({\n      url: this.config.url,\n      token: password\n    });\n\n    GitlabAPI.Users.current().then(response => {\n      if (user !== response.username) {\n        return cb(httperror[401]('wrong gitlab username'));\n      }\n\n      const publishLevelId = ACCESS_LEVEL_MAPPING[this.publishLevel];\n\n      // Set the groups of an authenticated user, in normal mode:\n      // - for access, depending on the package settings in verdaccio\n      // - for publish, the logged in user id and all the groups they can reach as configured with access level `$auth.gitlab.publish`\n      //\n      // In legacy mode, the groups are:\n      // - for access, depending on the package settings in verdaccio\n      // - for publish, the logged in user id and all the groups they can reach as fixed `$auth.gitlab.publish` = `$owner`\n      const gitlabPublishQueryParams = this.config.legacy_mode ? { owned: true } : { min_access_level: publishLevelId };\n      this.logger.trace('[gitlab] querying gitlab user groups with params:', gitlabPublishQueryParams);\n\n      const groupsPromise = GitlabAPI.Groups.all(gitlabPublishQueryParams).then(groups => {\n        return groups.filter(group => group.path === group.full_path).map(group => group.path);\n      });\n\n      const projectsPromise = GitlabAPI.Projects.all(gitlabPublishQueryParams).then(projects => {\n        return projects.map(project => project.path_with_namespace);\n      });\n\n      Promise.all([groupsPromise, projectsPromise]).then(([groups, projectGroups]) => {\n        const realGroups = [user, ...groups, ...projectGroups];\n        this._setCachedUserGroups(user, password, { publish: realGroups });\n\n        this.logger.info(`[gitlab] user: ${user} successfully authenticated`);\n        this.logger.debug(`[gitlab] user: ${user}, with groups:`, realGroups);\n\n        return cb(null, realGroups);\n      }).catch(error => {\n        this.logger.error(`[gitlab] user: ${user} error querying gitlab: ${error}`);\n        return cb(httperror[401]('error authenticating user'));\n      });\n\n    }).catch(error => {\n      this.logger.error(`[gitlab] user: ${user} error querying gitlab user data: ${error.message || {}}`);\n      return cb(httperror[401]('error authenticating user'));\n    });\n  }\n\n  adduser(user: string, password: string, cb: Callback) {\n    this.logger.trace(`[gitlab] adduser called for user: ${user}`);\n    return cb(null, true);\n  }\n\n  allow_access(user: RemoteUser, _package: VerdaccioGitlabPackageAccess, cb: Callback) {\n    if (!_package.gitlab) return cb(null, false);\n\n    const packageAccess = (_package.access && _package.access.length > 0) ? _package.access : DEFAULT_ALLOW_ACCESS_LEVEL;\n\n    if (user.name !== undefined) { // successfully authenticated\n      this.logger.debug(`[gitlab] allow user: ${user.name} authenticated access to package: ${_package.name}`);\n      return cb(null, true);\n    } else { // unauthenticated\n      if (BUILTIN_ACCESS_LEVEL_ANONYMOUS.some(level => packageAccess.includes(level))) {\n        this.logger.debug(`[gitlab] allow anonymous access to package: ${_package.name}`);\n        return cb(null, true);\n      } else {\n        this.logger.debug(`[gitlab] deny access to package: ${_package.name}`);\n        return cb(httperror[401]('access denied, user not authenticated and anonymous access disabled'));\n      }\n    }\n  }\n\n  allow_publish(user: RemoteUser, _package: VerdaccioGitlabPackageAccess, cb: Callback) {\n    if (!_package.gitlab) return cb(null, false);\n\n    let packageScopePermit = false;\n    let packagePermit = false;\n    // Only allow to publish packages when:\n    //  - the package has exactly the same name as one of the user groups, or\n    //  - the package scope is the same as one of the user groups\n    for (let real_group of user.real_groups) { // jscs:ignore requireCamelCaseOrUpperCaseIdentifiers\n      this.logger.trace(`[gitlab] publish: checking group: ${real_group} for user: ${user.name || ''} and package: ${_package.name}`);\n\n      if (this._matchGroupWithPackage(real_group, _package.name)) {\n        packagePermit = true;\n        break;\n      }\n    }\n\n    if (packagePermit || packageScopePermit) {\n      const perm = packagePermit ? 'package-name' : 'package-scope';\n      this.logger.debug(`[gitlab] user: ${user.name || ''} allowed to publish package: ${_package.name} based on ${perm}`);\n      return cb(null, true);\n    } else {\n      this.logger.debug(`[gitlab] user: ${user.name || ''} denied from publishing package: ${_package.name}`);\n      const missingPerm = _package.name.indexOf('@') === 0 ? 'package-scope' : 'package-name';\n      return cb(httperror[403](`must have required permissions: ${this.config.publish || ''} at ${missingPerm}`));\n    }\n  }\n\n  _matchGroupWithPackage(real_group: string, package_name: string): boolean {\n    if (real_group === package_name) {\n      return true\n    }\n\n    if (package_name.indexOf('@') === 0) {\n      const split_real_group = real_group.split('/');\n      const split_package_name = package_name.slice(1).split('/');\n\n      if (split_real_group.length > split_package_name.length) {\n        return false;\n      }\n\n      for (let i = 0; i < split_real_group.length; i += 1) {\n        if (split_real_group[i] !== split_package_name[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  _getCachedUserGroups(username: string, password: string): ?UserDataGroups {\n    if (!this.authCache) {\n      return null;\n    }\n    const userData = this.authCache.findUser(username, password);\n    return (userData || {}).groups || null;\n  }\n\n  _setCachedUserGroups(username: string, password: string, groups: UserDataGroups): boolean {\n    if (!this.authCache) {\n      return false;\n    }\n    this.logger.debug(`[gitlab] saving data in cache for user: ${username}`);\n    return this.authCache.storeUser(username, password, new UserData(username, groups));\n  }\n}\n"]}